datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Session {
  id               String    @id
  shop             String
  state            String
  isOnline         Boolean
  scope            String?
  expires          DateTime?
  onlineAccessInfo String?
  accessToken      String?
  userId           String?
  firstName        String?
  lastName         String?
  email            String?
  accountOwner     Boolean?
  locale           String?
  collaborator     Boolean?
  emailVerified    Boolean?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Order {
  id           String   @id @default(uuid()) // Unique order identifier
  shop         String // Shopify store identifier (e.g., shop domain)
  name         String // Order name or number
  email        String? // Customer email (nullable)
  createdAt    DateTime // Order creation timestamp
  updatedAt    DateTime // Order update timestamp
  totalPrice   Float // Total price of the order
  currencyCode String // Currency code for the order

  // Customer Details
  customerId        String? // Customer ID (nullable)
  customerFirstName String? // Customer's first name (nullable)
  customerLastName  String? // Customer's last name (nullable)
  customer          Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // Shipping Address Details
  shippingFirstName String? // Shipping first name (nullable)
  shippingLastName  String? // Shipping last name (nullable)
  address1          String? // Primary address line (nullable)
  address2          String? // Secondary address line (nullable)
  city              String? // City (nullable)
  province          String? // Province/State (nullable)
  country           String? // Country (nullable)
  zip               String? // Zip/Postal code (nullable)

  // Fulfillment Details
  fulfillmentStatus          String? // Fulfillment status (nullable)
  fulfillmentLastUpdatedDate DateTime? // Fulfillment date (nullable)
  fulfillmentTrackingNumber  String? // Tracking number (nullable)
  fulfillmentTrackingUrl     String? // Tracking URL (nullable)
  trackingCompany            String? // Shipping carrier (nullable)

    // NEW: Store Shopify order tags
tags String[] @default([])

  lineItems OrderLineItem[] // Relation field
  refunds   Refund[] // Array of refunds associated with this order
}

model OrderLineItem {
  id        String  @id @default(cuid())
  orderId   String
  name      String
  title     String
  productId String
  imageUrl  String?
  quantity  Int     @default(1) // Default value for quantity
  price     Float   @default(0.0) // Default value for price
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id]) // Relationship to Product

  @@index([orderId])
}

model Refund {
  id              String           @id @default(uuid()) // Unique refund identifier
  amount          Float // Refund amount
  currencyCode    String // Currency code for the refund
  createdAt       DateTime // Refund creation timestamp
  orderId         String // Associated order ID
  note            String? // Refund note (nullable)
  order           Order            @relation(fields: [orderId], references: [id])
  refundLineItems RefundLineItem[]
}

model RefundLineItem {
  id         String @id @default(uuid())
  refundId   String
  refund     Refund @relation(fields: [refundId], references: [id])
  lineItemId String
  title      String
  quantity   Int
  orderName  String @default("001") // New field to store the Order name or number
}

model Customer {
  id              String   @id @default(uuid()) // Unique customer identifier
  email           String   @unique // Customer email
  firstName       String? // Customer's first name (nullable)
  lastName        String? // Customer's last name (nullable)
  orderCount      Int      @default(0) // Count of orders placed by the customer
  totalOrderValue Float    @default(0.0) // Sum of all orders placed by the customer
  createdAt       DateTime @default(now()) // Customer creation timestamp
  updatedAt       DateTime @updatedAt // Customer update timestamp

  // Orders relationship
  orders Order[]
}

model Product {
  id     String   @id @default(cuid()) // Unique product identifier
  title  String // Product title
  images String[] // Store image URLs as an array of strings
  price  Float    @default(0.0) // Default value for price

  lineItems OrderLineItem[] // Relationship to OrderLineItem
}

model EmailTemplate {
  id        String   @id @default(uuid())
  storeId   String  @default("new") // Identifier for the store that created this template
  title     String // Name of the template, e.g., "Delayed Shipment"
  subject   String // Email subject
  bodyHtml  String // HTML content of the email
  bodyText  String // Plain text version of the email
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId]) // Indexing storeId for efficient lookups
}

model SenderEmail {
  id               Int      @id @default(autoincrement())
  email            String   @unique
  isVerified       Boolean  @default(false)
  isActive         Boolean  @default(false)
  shop             String
  verificationCode String? // Make sure this field exists
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
}

model EmailLog {
  id             Int      @id @default(autoincrement())
  orderId        String // The ID or number of the order
  email          String // The recipient email address
  subject        String
  sentAt         DateTime @default(now())
  sentCount      Int      @default(1) // Count of times email has been sent
  isOpened       Boolean  @default(false) // Track if email is opened
  isBouncedBack  Boolean  @default(false) // Track if email is bounced
  deliveryStatus String? // The status of delivery (e.g., Delivered, Failed)
  customerName   String? // Store customer name
  shop           String // Store the shop information for scoping the logs
  trackingId     String? // New column to store the tracking ID
  bodyHtml       String?
  bodyText       String?
}
